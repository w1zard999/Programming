<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="fileSystemWatcher1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SUVORK5CYII=
</value>
  </data>
</root>